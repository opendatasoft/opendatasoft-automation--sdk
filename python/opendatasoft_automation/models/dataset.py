# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opendatasoft_automation.models.dataset_metadata import DatasetMetadata
from opendatasoft_automation.models.dataset_security import DatasetSecurity
from typing import Optional, Set
from typing_extensions import Self

class Dataset(BaseModel):
    """
    Dataset
    """ # noqa: E501
    uid: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Unique identifier of the dataset that will never change through the lifetime of the dataset")
    dataset_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Human-readable identifier of the dataset that can be modified when the dataset is not published")
    created_at: Optional[datetime] = Field(default=None, description="Date when the dataset was created")
    updated_at: Optional[datetime] = Field(default=None, description="Date when the dataset's configuration was last edited")
    is_published: Optional[StrictBool] = False
    is_restricted: Optional[StrictBool] = Field(default=None, description="Defines if the dataset is visible for anonymous visitors.  - If it is `false`, anyone having access to the domain will be able to see the dataset in the catalog. Users who have at least a ruleset declared for them (whether directly, through a group or both) will be able to see everything their rulesets grant access to. Users who do not have any ruleset declared for them (neither directly nor through a group) will be able to see what the default ruleset (`default_security` dataset property) grants access to. - If it is `true`, the dataset will only appear in the catalog for users who have a ruleset declared for them, either directly or through a group. Other users won't have any access to the dataset. The `default_security` ruleset has no effect for restricted datasets.")
    metadata: DatasetMetadata
    default_security: Optional[DatasetSecurity] = None
    __properties: ClassVar[List[str]] = ["uid", "dataset_id", "created_at", "updated_at", "is_published", "is_restricted", "metadata", "default_security"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "uid",
            "created_at",
            "updated_at",
            "is_published",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_security
        if self.default_security:
            _dict['default_security'] = self.default_security.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uid": obj.get("uid"),
            "dataset_id": obj.get("dataset_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_published": obj.get("is_published") if obj.get("is_published") is not None else False,
            "is_restricted": obj.get("is_restricted"),
            "metadata": DatasetMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "default_security": DatasetSecurity.from_dict(obj["default_security"]) if obj.get("default_security") is not None else None
        })
        return _obj


