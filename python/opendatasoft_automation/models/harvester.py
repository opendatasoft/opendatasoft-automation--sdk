# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from opendatasoft_automation.models.related_user_read_only import RelatedUserReadOnly
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from opendatasoft_automation.models.arcgis_harvester import ArcgisHarvester
    from opendatasoft_automation.models.arcgis_opendata_harvester import ArcgisOpendataHarvester
    from opendatasoft_automation.models.ckan_harvester import CKANHarvester
    from opendatasoft_automation.models.csw_harvester import CSWHarvester
    from opendatasoft_automation.models.datagouv_harvester import DatagouvHarvester
    from opendatasoft_automation.models.datajson_harvester import DatajsonHarvester
    from opendatasoft_automation.models.ftp_harvester import FTPHarvester
    from opendatasoft_automation.models.ftpcsv_harvester import FTPCSVHarvester
    from opendatasoft_automation.models.ftp_with_meta_csv_harvester import FTPWithMetaCSVHarvester
    from opendatasoft_automation.models.junar_harvester import JunarHarvester
    from opendatasoft_automation.models.opendatasoft_harvester import OpendatasoftHarvester
    from opendatasoft_automation.models.omi_node_harvester import OMINodeHarvester
    from opendatasoft_automation.models.quandl_harvester import QuandlHarvester
    from opendatasoft_automation.models.socrata_harvester import SocrataHarvester
    from opendatasoft_automation.models.wfs_harvester import WFSHarvester

class Harvester(BaseModel):
    """
    Harvester
    """ # noqa: E501
    uid: Annotated[str, Field(min_length=1, strict=True)]
    type: Annotated[str, Field(min_length=1, strict=True)]
    name: Annotated[str, Field(min_length=1, strict=True)]
    status: StrictStr
    version: Optional[Annotated[int, Field(strict=True, ge=1)]] = 1
    restrict_datasets_visibility: Optional[StrictBool] = Field(default=None, description="If the harvested datasets should be configured as private. By default, it has the same value as the domain configuration \"Restrict new datasets by default\"")
    delete_missing_datasets: Optional[StrictBool] = Field(default=False, description="If the source datasets are deleted on the harvested portal, delete them on this Opendatasoft portal too")
    forced_metas: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Allow you to override some metadata in every harvested dataset")
    remote_datasets_count: StrictInt = Field(description="How many datasets have been found on the remote catalog")
    harvested_datasets_count: StrictInt = Field(description="How many datasets have been harvested in the current or last run")
    published_datasets_count: StrictInt = Field(description="How many harvested datasets are published")
    attached_datasets_count: StrictInt = Field(description="How many datasets in your Opendatasoft portal have been created by this harvester")
    has_error: StrictBool = Field(description="If the last harvesting resulted in a critical error")
    resource_errors_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="How many datasets on the remote catalog led to an error and couldn't be harvested")
    created_at: datetime
    updated_at: datetime
    updated_by: RelatedUserReadOnly
    last_started_at: Optional[datetime] = Field(description="The last time the harvester was started")
    last_success_at: Optional[datetime] = Field(description="The last time the harvesting has been succcesful")
    __properties: ClassVar[List[str]] = ["uid", "type", "name", "status", "version", "restrict_datasets_visibility", "delete_missing_datasets", "forced_metas", "remote_datasets_count", "harvested_datasets_count", "published_datasets_count", "attached_datasets_count", "has_error", "resource_errors_count", "created_at", "updated_at", "updated_by", "last_started_at", "last_success_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['idle', 'queued', 'aborting', 'processing', 'deleting', 'new']):
            raise ValueError("must be one of enum values ('idle', 'queued', 'aborting', 'processing', 'deleting', 'new')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'arcgis': 'ArcgisHarvester','arcgis_opendata': 'ArcgisOpendataHarvester','ckan': 'CKANHarvester','csw': 'CSWHarvester','datagouv': 'DatagouvHarvester','datajson': 'DatajsonHarvester','ftp': 'FTPHarvester','ftp_csv': 'FTPCSVHarvester','ftp_with_meta_csv': 'FTPWithMetaCSVHarvester','junar': 'JunarHarvester','ods': 'OpendatasoftHarvester','omi_node': 'OMINodeHarvester','quandl': 'QuandlHarvester','socrata': 'SocrataHarvester','wfs': 'WFSHarvester'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ArcgisHarvester, ArcgisOpendataHarvester, CKANHarvester, CSWHarvester, DatagouvHarvester, DatajsonHarvester, FTPHarvester, FTPCSVHarvester, FTPWithMetaCSVHarvester, JunarHarvester, OpendatasoftHarvester, OMINodeHarvester, QuandlHarvester, SocrataHarvester, WFSHarvester]]:
        """Create an instance of Harvester from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "uid",
            "status",
            "remote_datasets_count",
            "harvested_datasets_count",
            "published_datasets_count",
            "attached_datasets_count",
            "has_error",
            "resource_errors_count",
            "created_at",
            "updated_at",
            "last_started_at",
            "last_success_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updated_by'] = self.updated_by.to_dict()
        # set to None if last_started_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_started_at is None and "last_started_at" in self.model_fields_set:
            _dict['last_started_at'] = None

        # set to None if last_success_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_success_at is None and "last_success_at" in self.model_fields_set:
            _dict['last_success_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ArcgisHarvester, ArcgisOpendataHarvester, CKANHarvester, CSWHarvester, DatagouvHarvester, DatajsonHarvester, FTPHarvester, FTPCSVHarvester, FTPWithMetaCSVHarvester, JunarHarvester, OpendatasoftHarvester, OMINodeHarvester, QuandlHarvester, SocrataHarvester, WFSHarvester]]:
        """Create an instance of Harvester from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ArcgisHarvester':
            return import_module("opendatasoft_automation.models.arcgis_harvester").ArcgisHarvester.from_dict(obj)
        if object_type ==  'ArcgisOpendataHarvester':
            return import_module("opendatasoft_automation.models.arcgis_opendata_harvester").ArcgisOpendataHarvester.from_dict(obj)
        if object_type ==  'CKANHarvester':
            return import_module("opendatasoft_automation.models.ckan_harvester").CKANHarvester.from_dict(obj)
        if object_type ==  'CSWHarvester':
            return import_module("opendatasoft_automation.models.csw_harvester").CSWHarvester.from_dict(obj)
        if object_type ==  'DatagouvHarvester':
            return import_module("opendatasoft_automation.models.datagouv_harvester").DatagouvHarvester.from_dict(obj)
        if object_type ==  'DatajsonHarvester':
            return import_module("opendatasoft_automation.models.datajson_harvester").DatajsonHarvester.from_dict(obj)
        if object_type ==  'FTPHarvester':
            return import_module("opendatasoft_automation.models.ftp_harvester").FTPHarvester.from_dict(obj)
        if object_type ==  'FTPCSVHarvester':
            return import_module("opendatasoft_automation.models.ftpcsv_harvester").FTPCSVHarvester.from_dict(obj)
        if object_type ==  'FTPWithMetaCSVHarvester':
            return import_module("opendatasoft_automation.models.ftp_with_meta_csv_harvester").FTPWithMetaCSVHarvester.from_dict(obj)
        if object_type ==  'JunarHarvester':
            return import_module("opendatasoft_automation.models.junar_harvester").JunarHarvester.from_dict(obj)
        if object_type ==  'OpendatasoftHarvester':
            return import_module("opendatasoft_automation.models.opendatasoft_harvester").OpendatasoftHarvester.from_dict(obj)
        if object_type ==  'OMINodeHarvester':
            return import_module("opendatasoft_automation.models.omi_node_harvester").OMINodeHarvester.from_dict(obj)
        if object_type ==  'QuandlHarvester':
            return import_module("opendatasoft_automation.models.quandl_harvester").QuandlHarvester.from_dict(obj)
        if object_type ==  'SocrataHarvester':
            return import_module("opendatasoft_automation.models.socrata_harvester").SocrataHarvester.from_dict(obj)
        if object_type ==  'WFSHarvester':
            return import_module("opendatasoft_automation.models.wfs_harvester").WFSHarvester.from_dict(obj)

        raise ValueError("Harvester failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


