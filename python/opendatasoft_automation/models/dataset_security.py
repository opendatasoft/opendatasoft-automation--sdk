# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from opendatasoft_automation.models.dataset_security_api_calls_quota import DatasetSecurityApiCallsQuota
from typing import Optional, Set
from typing_extensions import Self

class DatasetSecurity(BaseModel):
    """
    DatasetSecurity
    """ # noqa: E501
    is_data_visible: Optional[StrictBool] = Field(default=None, description="Flag indicating whether the target will have access to the records of the dataset or not.")
    visible_fields: Optional[List[Annotated[str, Field(min_length=1, strict=True)]]] = Field(default=None, description="The target will only have access to the fields from this list. `null` means that the target has access to all fields. An empty list means that the target won't see any field (empty dataset schema).")
    filter_query: Optional[StrictStr] = Field(default=None, description="The target will only have access to the records matching this query. An empty query means that all records are accessible.")
    api_calls_quota: Optional[DatasetSecurityApiCallsQuota] = None
    __properties: ClassVar[List[str]] = ["is_data_visible", "visible_fields", "filter_query", "api_calls_quota"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_calls_quota
        if self.api_calls_quota:
            _dict['api_calls_quota'] = self.api_calls_quota.to_dict()
        # set to None if visible_fields (nullable) is None
        # and model_fields_set contains the field
        if self.visible_fields is None and "visible_fields" in self.model_fields_set:
            _dict['visible_fields'] = None

        # set to None if api_calls_quota (nullable) is None
        # and model_fields_set contains the field
        if self.api_calls_quota is None and "api_calls_quota" in self.model_fields_set:
            _dict['api_calls_quota'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_data_visible": obj.get("is_data_visible"),
            "visible_fields": obj.get("visible_fields"),
            "filter_query": obj.get("filter_query"),
            "api_calls_quota": DatasetSecurityApiCallsQuota.from_dict(obj["api_calls_quota"]) if obj.get("api_calls_quota") is not None else None
        })
        return _obj


