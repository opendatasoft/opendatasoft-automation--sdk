# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from opendatasoft_automation.models.amazon_s3_connection import AmazonS3Connection
    from opendatasoft_automation.models.azure_blob_storage_connection import AzureBlobStorageConnection
    from opendatasoft_automation.models.ftp_connection import FTPConnection
    from opendatasoft_automation.models.google_drive_connection import GoogleDriveConnection
    from opendatasoft_automation.models.http_connection import HTTPConnection
    from opendatasoft_automation.models.sharepoint_connection import SharepointConnection

class Connection(BaseModel):
    """
    Connection
    """ # noqa: E501
    uid: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    type: Annotated[str, Field(min_length=1, strict=True)]
    is_reusable: Optional[StrictBool] = Field(default=None, description="Defines if the connection can be reused across multiple datasets")
    can_reuse: Optional[StrictBool] = Field(default=None, description="Defines if the current user has the permission to reuse this connection")
    can_manage: Optional[StrictBool] = Field(default=None, description="Defines if the current user has the permission to manage this connection")
    dataset_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of datasets using this connection")
    user_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of users with explicit access to this connection")
    group_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of user groups with explicit access to this connection")
    created_at: Optional[date] = None
    updated_at: Optional[date] = None
    __properties: ClassVar[List[str]] = ["uid", "type", "is_reusable", "can_reuse", "can_manage", "dataset_count", "user_count", "group_count", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'amazon_s3': 'AmazonS3Connection','azure_blob_storage': 'AzureBlobStorageConnection','ftp': 'FTPConnection','google_drive': 'GoogleDriveConnection','http': 'HTTPConnection','sharepoint': 'SharepointConnection'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AmazonS3Connection, AzureBlobStorageConnection, FTPConnection, GoogleDriveConnection, HTTPConnection, SharepointConnection]]:
        """Create an instance of Connection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "uid",
            "can_reuse",
            "can_manage",
            "dataset_count",
            "user_count",
            "group_count",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AmazonS3Connection, AzureBlobStorageConnection, FTPConnection, GoogleDriveConnection, HTTPConnection, SharepointConnection]]:
        """Create an instance of Connection from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'amazon_s3':
            return import_module("opendatasoft_automation.models.amazon_s3_connection").AmazonS3Connection.from_dict(obj)
        if object_type ==  'azure_blob_storage':
            return import_module("opendatasoft_automation.models.azure_blob_storage_connection").AzureBlobStorageConnection.from_dict(obj)
        if object_type ==  'ftp':
            return import_module("opendatasoft_automation.models.ftp_connection").FTPConnection.from_dict(obj)
        if object_type ==  'google_drive':
            return import_module("opendatasoft_automation.models.google_drive_connection").GoogleDriveConnection.from_dict(obj)
        if object_type ==  'http':
            return import_module("opendatasoft_automation.models.http_connection").HTTPConnection.from_dict(obj)
        if object_type ==  'sharepoint':
            return import_module("opendatasoft_automation.models.sharepoint_connection").SharepointConnection.from_dict(obj)

        raise ValueError("Connection failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


