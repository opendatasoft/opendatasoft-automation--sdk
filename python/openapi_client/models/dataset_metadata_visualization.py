# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dataset_metadata_value import DatasetMetadataValue
from typing import Optional, Set
from typing_extensions import Self

class DatasetMetadataVisualization(BaseModel):
    """
    This set of metadata is used to configure the dataset visualizations on your portal.
    """ # noqa: E501
    analyze_disabled: Optional[DatasetMetadataValue] = None
    analyze_default: Optional[DatasetMetadataValue] = None
    table_fields: Optional[DatasetMetadataValue] = None
    table_default_sort_field: Optional[DatasetMetadataValue] = None
    table_default_sort_direction: Optional[DatasetMetadataValue] = None
    map_disabled: Optional[DatasetMetadataValue] = None
    map_marker_picto: Optional[DatasetMetadataValue] = None
    map_marker_color: Optional[DatasetMetadataValue] = None
    map_marker_hidemarkershape: Optional[DatasetMetadataValue] = None
    map_tooltip_title: Optional[DatasetMetadataValue] = None
    map_tooltip_fields: Optional[DatasetMetadataValue] = None
    map_tooltip_disabled: Optional[DatasetMetadataValue] = None
    map_tooltip_html_enabled: Optional[DatasetMetadataValue] = None
    map_tooltip_html: Optional[DatasetMetadataValue] = None
    map_tooltip_sort_field: Optional[DatasetMetadataValue] = None
    map_tooltip_sort_direction: Optional[DatasetMetadataValue] = None
    map_basemap: Optional[DatasetMetadataValue] = None
    images_disabled: Optional[DatasetMetadataValue] = None
    media_gallery_fields: Optional[DatasetMetadataValue] = None
    image_title: Optional[DatasetMetadataValue] = None
    image_fields: Optional[DatasetMetadataValue] = None
    image_tooltip_html_enabled: Optional[DatasetMetadataValue] = None
    image_tooltip_html: Optional[DatasetMetadataValue] = None
    calendar_enabled: Optional[DatasetMetadataValue] = None
    calendar_event_title: Optional[DatasetMetadataValue] = None
    calendar_event_start: Optional[DatasetMetadataValue] = None
    calendar_event_end: Optional[DatasetMetadataValue] = None
    calendar_tooltip_html_enabled: Optional[DatasetMetadataValue] = None
    calendar_tooltip_html: Optional[DatasetMetadataValue] = None
    calendar_tooltip_fields: Optional[DatasetMetadataValue] = None
    calendar_event_color: Optional[DatasetMetadataValue] = None
    calendar_available_views: Optional[DatasetMetadataValue] = None
    calendar_default_view: Optional[DatasetMetadataValue] = None
    custom_view_enabled: Optional[DatasetMetadataValue] = None
    custom_view_html: Optional[DatasetMetadataValue] = None
    custom_view_css: Optional[DatasetMetadataValue] = None
    custom_view_icon: Optional[DatasetMetadataValue] = None
    custom_view_title: Optional[DatasetMetadataValue] = None
    custom_view_slug: Optional[DatasetMetadataValue] = None
    __properties: ClassVar[List[str]] = ["analyze_disabled", "analyze_default", "table_fields", "table_default_sort_field", "table_default_sort_direction", "map_disabled", "map_marker_picto", "map_marker_color", "map_marker_hidemarkershape", "map_tooltip_title", "map_tooltip_fields", "map_tooltip_disabled", "map_tooltip_html_enabled", "map_tooltip_html", "map_tooltip_sort_field", "map_tooltip_sort_direction", "map_basemap", "images_disabled", "media_gallery_fields", "image_title", "image_fields", "image_tooltip_html_enabled", "image_tooltip_html", "calendar_enabled", "calendar_event_title", "calendar_event_start", "calendar_event_end", "calendar_tooltip_html_enabled", "calendar_tooltip_html", "calendar_tooltip_fields", "calendar_event_color", "calendar_available_views", "calendar_default_view", "custom_view_enabled", "custom_view_html", "custom_view_css", "custom_view_icon", "custom_view_title", "custom_view_slug"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetMetadataVisualization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analyze_disabled
        if self.analyze_disabled:
            _dict['analyze_disabled'] = self.analyze_disabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of analyze_default
        if self.analyze_default:
            _dict['analyze_default'] = self.analyze_default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_fields
        if self.table_fields:
            _dict['table_fields'] = self.table_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_default_sort_field
        if self.table_default_sort_field:
            _dict['table_default_sort_field'] = self.table_default_sort_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_default_sort_direction
        if self.table_default_sort_direction:
            _dict['table_default_sort_direction'] = self.table_default_sort_direction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_disabled
        if self.map_disabled:
            _dict['map_disabled'] = self.map_disabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_marker_picto
        if self.map_marker_picto:
            _dict['map_marker_picto'] = self.map_marker_picto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_marker_color
        if self.map_marker_color:
            _dict['map_marker_color'] = self.map_marker_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_marker_hidemarkershape
        if self.map_marker_hidemarkershape:
            _dict['map_marker_hidemarkershape'] = self.map_marker_hidemarkershape.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_tooltip_title
        if self.map_tooltip_title:
            _dict['map_tooltip_title'] = self.map_tooltip_title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_tooltip_fields
        if self.map_tooltip_fields:
            _dict['map_tooltip_fields'] = self.map_tooltip_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_tooltip_disabled
        if self.map_tooltip_disabled:
            _dict['map_tooltip_disabled'] = self.map_tooltip_disabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_tooltip_html_enabled
        if self.map_tooltip_html_enabled:
            _dict['map_tooltip_html_enabled'] = self.map_tooltip_html_enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_tooltip_html
        if self.map_tooltip_html:
            _dict['map_tooltip_html'] = self.map_tooltip_html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_tooltip_sort_field
        if self.map_tooltip_sort_field:
            _dict['map_tooltip_sort_field'] = self.map_tooltip_sort_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_tooltip_sort_direction
        if self.map_tooltip_sort_direction:
            _dict['map_tooltip_sort_direction'] = self.map_tooltip_sort_direction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_basemap
        if self.map_basemap:
            _dict['map_basemap'] = self.map_basemap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of images_disabled
        if self.images_disabled:
            _dict['images_disabled'] = self.images_disabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media_gallery_fields
        if self.media_gallery_fields:
            _dict['media_gallery_fields'] = self.media_gallery_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_title
        if self.image_title:
            _dict['image_title'] = self.image_title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_fields
        if self.image_fields:
            _dict['image_fields'] = self.image_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_tooltip_html_enabled
        if self.image_tooltip_html_enabled:
            _dict['image_tooltip_html_enabled'] = self.image_tooltip_html_enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_tooltip_html
        if self.image_tooltip_html:
            _dict['image_tooltip_html'] = self.image_tooltip_html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_enabled
        if self.calendar_enabled:
            _dict['calendar_enabled'] = self.calendar_enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_event_title
        if self.calendar_event_title:
            _dict['calendar_event_title'] = self.calendar_event_title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_event_start
        if self.calendar_event_start:
            _dict['calendar_event_start'] = self.calendar_event_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_event_end
        if self.calendar_event_end:
            _dict['calendar_event_end'] = self.calendar_event_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_tooltip_html_enabled
        if self.calendar_tooltip_html_enabled:
            _dict['calendar_tooltip_html_enabled'] = self.calendar_tooltip_html_enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_tooltip_html
        if self.calendar_tooltip_html:
            _dict['calendar_tooltip_html'] = self.calendar_tooltip_html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_tooltip_fields
        if self.calendar_tooltip_fields:
            _dict['calendar_tooltip_fields'] = self.calendar_tooltip_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_event_color
        if self.calendar_event_color:
            _dict['calendar_event_color'] = self.calendar_event_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_available_views
        if self.calendar_available_views:
            _dict['calendar_available_views'] = self.calendar_available_views.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_default_view
        if self.calendar_default_view:
            _dict['calendar_default_view'] = self.calendar_default_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_view_enabled
        if self.custom_view_enabled:
            _dict['custom_view_enabled'] = self.custom_view_enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_view_html
        if self.custom_view_html:
            _dict['custom_view_html'] = self.custom_view_html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_view_css
        if self.custom_view_css:
            _dict['custom_view_css'] = self.custom_view_css.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_view_icon
        if self.custom_view_icon:
            _dict['custom_view_icon'] = self.custom_view_icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_view_title
        if self.custom_view_title:
            _dict['custom_view_title'] = self.custom_view_title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_view_slug
        if self.custom_view_slug:
            _dict['custom_view_slug'] = self.custom_view_slug.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetMetadataVisualization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyze_disabled": DatasetMetadataValue.from_dict(obj["analyze_disabled"]) if obj.get("analyze_disabled") is not None else None,
            "analyze_default": DatasetMetadataValue.from_dict(obj["analyze_default"]) if obj.get("analyze_default") is not None else None,
            "table_fields": DatasetMetadataValue.from_dict(obj["table_fields"]) if obj.get("table_fields") is not None else None,
            "table_default_sort_field": DatasetMetadataValue.from_dict(obj["table_default_sort_field"]) if obj.get("table_default_sort_field") is not None else None,
            "table_default_sort_direction": DatasetMetadataValue.from_dict(obj["table_default_sort_direction"]) if obj.get("table_default_sort_direction") is not None else None,
            "map_disabled": DatasetMetadataValue.from_dict(obj["map_disabled"]) if obj.get("map_disabled") is not None else None,
            "map_marker_picto": DatasetMetadataValue.from_dict(obj["map_marker_picto"]) if obj.get("map_marker_picto") is not None else None,
            "map_marker_color": DatasetMetadataValue.from_dict(obj["map_marker_color"]) if obj.get("map_marker_color") is not None else None,
            "map_marker_hidemarkershape": DatasetMetadataValue.from_dict(obj["map_marker_hidemarkershape"]) if obj.get("map_marker_hidemarkershape") is not None else None,
            "map_tooltip_title": DatasetMetadataValue.from_dict(obj["map_tooltip_title"]) if obj.get("map_tooltip_title") is not None else None,
            "map_tooltip_fields": DatasetMetadataValue.from_dict(obj["map_tooltip_fields"]) if obj.get("map_tooltip_fields") is not None else None,
            "map_tooltip_disabled": DatasetMetadataValue.from_dict(obj["map_tooltip_disabled"]) if obj.get("map_tooltip_disabled") is not None else None,
            "map_tooltip_html_enabled": DatasetMetadataValue.from_dict(obj["map_tooltip_html_enabled"]) if obj.get("map_tooltip_html_enabled") is not None else None,
            "map_tooltip_html": DatasetMetadataValue.from_dict(obj["map_tooltip_html"]) if obj.get("map_tooltip_html") is not None else None,
            "map_tooltip_sort_field": DatasetMetadataValue.from_dict(obj["map_tooltip_sort_field"]) if obj.get("map_tooltip_sort_field") is not None else None,
            "map_tooltip_sort_direction": DatasetMetadataValue.from_dict(obj["map_tooltip_sort_direction"]) if obj.get("map_tooltip_sort_direction") is not None else None,
            "map_basemap": DatasetMetadataValue.from_dict(obj["map_basemap"]) if obj.get("map_basemap") is not None else None,
            "images_disabled": DatasetMetadataValue.from_dict(obj["images_disabled"]) if obj.get("images_disabled") is not None else None,
            "media_gallery_fields": DatasetMetadataValue.from_dict(obj["media_gallery_fields"]) if obj.get("media_gallery_fields") is not None else None,
            "image_title": DatasetMetadataValue.from_dict(obj["image_title"]) if obj.get("image_title") is not None else None,
            "image_fields": DatasetMetadataValue.from_dict(obj["image_fields"]) if obj.get("image_fields") is not None else None,
            "image_tooltip_html_enabled": DatasetMetadataValue.from_dict(obj["image_tooltip_html_enabled"]) if obj.get("image_tooltip_html_enabled") is not None else None,
            "image_tooltip_html": DatasetMetadataValue.from_dict(obj["image_tooltip_html"]) if obj.get("image_tooltip_html") is not None else None,
            "calendar_enabled": DatasetMetadataValue.from_dict(obj["calendar_enabled"]) if obj.get("calendar_enabled") is not None else None,
            "calendar_event_title": DatasetMetadataValue.from_dict(obj["calendar_event_title"]) if obj.get("calendar_event_title") is not None else None,
            "calendar_event_start": DatasetMetadataValue.from_dict(obj["calendar_event_start"]) if obj.get("calendar_event_start") is not None else None,
            "calendar_event_end": DatasetMetadataValue.from_dict(obj["calendar_event_end"]) if obj.get("calendar_event_end") is not None else None,
            "calendar_tooltip_html_enabled": DatasetMetadataValue.from_dict(obj["calendar_tooltip_html_enabled"]) if obj.get("calendar_tooltip_html_enabled") is not None else None,
            "calendar_tooltip_html": DatasetMetadataValue.from_dict(obj["calendar_tooltip_html"]) if obj.get("calendar_tooltip_html") is not None else None,
            "calendar_tooltip_fields": DatasetMetadataValue.from_dict(obj["calendar_tooltip_fields"]) if obj.get("calendar_tooltip_fields") is not None else None,
            "calendar_event_color": DatasetMetadataValue.from_dict(obj["calendar_event_color"]) if obj.get("calendar_event_color") is not None else None,
            "calendar_available_views": DatasetMetadataValue.from_dict(obj["calendar_available_views"]) if obj.get("calendar_available_views") is not None else None,
            "calendar_default_view": DatasetMetadataValue.from_dict(obj["calendar_default_view"]) if obj.get("calendar_default_view") is not None else None,
            "custom_view_enabled": DatasetMetadataValue.from_dict(obj["custom_view_enabled"]) if obj.get("custom_view_enabled") is not None else None,
            "custom_view_html": DatasetMetadataValue.from_dict(obj["custom_view_html"]) if obj.get("custom_view_html") is not None else None,
            "custom_view_css": DatasetMetadataValue.from_dict(obj["custom_view_css"]) if obj.get("custom_view_css") is not None else None,
            "custom_view_icon": DatasetMetadataValue.from_dict(obj["custom_view_icon"]) if obj.get("custom_view_icon") is not None else None,
            "custom_view_title": DatasetMetadataValue.from_dict(obj["custom_view_title"]) if obj.get("custom_view_title") is not None else None,
            "custom_view_slug": DatasetMetadataValue.from_dict(obj["custom_view_slug"]) if obj.get("custom_view_slug") is not None else None
        })
        return _obj


