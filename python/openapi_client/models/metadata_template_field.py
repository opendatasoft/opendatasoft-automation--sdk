# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetadataTemplateField(BaseModel):
    """
    Metadata Template Field (part of the template's schema)
    """ # noqa: E501
    name: StrictStr = Field(description="Metadata Template field name (identifier)")
    type: Optional[StrictStr] = Field(default='text', description="Type of the field")
    label: Optional[StrictStr] = Field(default=None, description="The label (short description) of this field.")
    help_text: Optional[StrictStr] = None
    is_hidden: Optional[StrictBool] = Field(default=False, description="System property.")
    self_suggest: Optional[StrictBool] = Field(default=False, description="If True then it will build an URL for getting suggestion of already-filled values. (see suggest_url)")
    is_filter: Optional[StrictBool] = Field(default=False, description="If True then this filed can be used a filter.")
    i18n: Optional[StrictBool] = Field(default=False, description="If True then this field will be managed by our i18n system.")
    suggest_url: Optional[StrictStr] = None
    choices: Optional[List[StrictStr]] = None
    labels: Optional[Dict[str, Dict[str, StrictStr]]] = None
    requirement_level: Optional[StrictStr] = Field(default='optional', description="The indicative requirement level associated to this field.")
    __properties: ClassVar[List[str]] = ["name", "type", "label", "help_text", "is_hidden", "self_suggest", "is_filter", "i18n", "suggest_url", "choices", "labels", "requirement_level"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'date', 'datetime', 'geo_shape', 'geo_area', 'html', 'multitext', 'boolean', 'int', 'double', 'longstring', 'enum', 'list', 'enumlist', 'uri_enum', 'uri_enumlist']):
            raise ValueError("must be one of enum values ('text', 'date', 'datetime', 'geo_shape', 'geo_area', 'html', 'multitext', 'boolean', 'int', 'double', 'longstring', 'enum', 'list', 'enumlist', 'uri_enum', 'uri_enumlist')")
        return value

    @field_validator('requirement_level')
    def requirement_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['optional', 'recommended', 'mandatory']):
            raise ValueError("must be one of enum values ('optional', 'recommended', 'mandatory')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataTemplateField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_hidden",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if help_text (nullable) is None
        # and model_fields_set contains the field
        if self.help_text is None and "help_text" in self.model_fields_set:
            _dict['help_text'] = None

        # set to None if suggest_url (nullable) is None
        # and model_fields_set contains the field
        if self.suggest_url is None and "suggest_url" in self.model_fields_set:
            _dict['suggest_url'] = None

        # set to None if choices (nullable) is None
        # and model_fields_set contains the field
        if self.choices is None and "choices" in self.model_fields_set:
            _dict['choices'] = None

        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict['labels'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataTemplateField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type") if obj.get("type") is not None else 'text',
            "label": obj.get("label"),
            "help_text": obj.get("help_text"),
            "is_hidden": obj.get("is_hidden") if obj.get("is_hidden") is not None else False,
            "self_suggest": obj.get("self_suggest") if obj.get("self_suggest") is not None else False,
            "is_filter": obj.get("is_filter") if obj.get("is_filter") is not None else False,
            "i18n": obj.get("i18n") if obj.get("i18n") is not None else False,
            "suggest_url": obj.get("suggest_url"),
            "choices": obj.get("choices"),
            "labels": obj.get("labels"),
            "requirement_level": obj.get("requirement_level") if obj.get("requirement_level") is not None else 'optional'
        })
        return _obj


