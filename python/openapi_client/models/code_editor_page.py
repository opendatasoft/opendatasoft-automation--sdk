# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.code_editor_page_content import CodeEditorPageContent
from openapi_client.models.related_user_read_only import RelatedUserReadOnly
from typing import Optional, Set
from typing_extensions import Self

class CodeEditorPage(BaseModel):
    """
    CodeEditorPage
    """ # noqa: E501
    slug: Optional[StrictStr] = Field(default=None, description="Human-readable identifier used to generate the page URL")
    title: Optional[Dict[str, StrictStr]] = Field(default=None, description="Internationalized page title")
    description: Optional[StrictStr] = Field(default=None, description="Page description")
    content: CodeEditorPageContent
    template: Optional[StrictStr] = Field(default=None, description="The HTML template used by this page")
    tags: Optional[List[StrictStr]] = Field(default=None, description="List of strings used to classify and sort pages")
    has_subdomain_copies: Optional[StrictBool] = Field(default=None, description="Inform if the page been distributed to any subdomain")
    is_pushed_by_parent: Optional[StrictBool] = Field(default=None, description="Inform if the page has been distributed by a parent domain")
    is_restricted: Optional[StrictBool] = Field(default=None, description="Defines if the page is visible to a few specific users, or every user who can explore the portal")
    is_archived: Optional[StrictBool] = Field(default=None, description="Defines if the page is archived. An archived page isn't included in the license quota, but can't be edited and isn't available to users.")
    created_by: Optional[RelatedUserReadOnly] = None
    updated_by: Optional[RelatedUserReadOnly] = None
    updated_at: Optional[datetime] = Field(default=None, description="Date when the page was last edited")
    created_at: Optional[datetime] = Field(default=None, description="Date when the page was created")
    __properties: ClassVar[List[str]] = ["slug", "title", "description", "content", "template", "tags", "has_subdomain_copies", "is_pushed_by_parent", "is_restricted", "is_archived", "created_by", "updated_by", "updated_at", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodeEditorPage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "has_subdomain_copies",
            "is_pushed_by_parent",
            "updated_at",
            "created_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updated_by'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodeEditorPage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "slug": obj.get("slug"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "content": CodeEditorPageContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "template": obj.get("template"),
            "tags": obj.get("tags"),
            "has_subdomain_copies": obj.get("has_subdomain_copies"),
            "is_pushed_by_parent": obj.get("is_pushed_by_parent"),
            "is_restricted": obj.get("is_restricted"),
            "is_archived": obj.get("is_archived"),
            "created_by": RelatedUserReadOnly.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "updated_by": RelatedUserReadOnly.from_dict(obj["updated_by"]) if obj.get("updated_by") is not None else None,
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at")
        })
        return _obj


