# coding: utf-8

"""
    Opendatasoft's Automation API Documentation

    Opendatasoft REST API to manage your portal and its catalog

    The version of the OpenAPI document: 1.0
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dataset_metadata_visualization import DatasetMetadataVisualization

class TestDatasetMetadataVisualization(unittest.TestCase):
    """DatasetMetadataVisualization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetMetadataVisualization:
        """Test DatasetMetadataVisualization
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetMetadataVisualization`
        """
        model = DatasetMetadataVisualization()
        if include_optional:
            return DatasetMetadataVisualization(
                analyze_disabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                analyze_default = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                table_fields = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                table_default_sort_field = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                table_default_sort_direction = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_disabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_marker_picto = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_marker_color = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_marker_hidemarkershape = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_tooltip_title = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_tooltip_fields = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_tooltip_disabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_tooltip_html_enabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_tooltip_html = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_tooltip_sort_field = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_tooltip_sort_direction = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                map_basemap = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                images_disabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                media_gallery_fields = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                image_title = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                image_fields = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                image_tooltip_html_enabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                image_tooltip_html = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_enabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_event_title = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_event_start = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_event_end = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_tooltip_html_enabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_tooltip_html = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_tooltip_fields = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_event_color = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_available_views = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                calendar_default_view = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                custom_view_enabled = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                custom_view_html = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                custom_view_css = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                custom_view_icon = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                custom_view_title = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true},
                custom_view_slug = {"value":"Metadata value","remote_value":"Metadata value on the remote dataset, if there is one","override_remote_value":true}
            )
        else:
            return DatasetMetadataVisualization(
        )
        """

    def testDatasetMetadataVisualization(self):
        """Test DatasetMetadataVisualization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
